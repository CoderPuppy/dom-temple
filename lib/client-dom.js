// Generated by CoffeeScript 1.6.3
(function() {
  var Document, DocumentFragment, Element, Node, ParentNode, TextNode, main, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Node = (function() {
    function Node(_impl) {
      this._impl = _impl;
    }

    Node.prototype.outerHtml = function(val) {
      if (val != null) {
        this._impl.outerHtml = val;
        return this;
      } else {
        return this._impl.outerHTML;
      }
    };

    Node.prototype.text = function(text) {
      if (text != null) {
        this._impl.textContent = text;
        return this;
      } else {
        return this._impl.textContent;
      }
    };

    Node.prototype.parent = function() {
      return Node.wrap(this._impl.parentNode);
    };

    Node.wrap = function(node) {
      switch (node.nodeType) {
        case window.Node.DOCUMENT_NODE:
          return new Document(node);
        case window.Node.DOCUMENT_FRAGMENT_NODE:
          return new DocumentFragment(node);
        case window.Node.ELEMENT_NODE:
          return new Element(node);
        case window.Node.TEXT_NODE:
          return new TextNode(node);
        default:
          return new Node(node);
      }
    };

    return Node;

  })();

  TextNode = (function(_super) {
    __extends(TextNode, _super);

    function TextNode(text) {
      if (typeof text === 'string') {
        TextNode.__super__.constructor.call(this, document.createTextNode(text));
      } else if ((text != null) && text.nodeType === window.Node.TEXT_NODE) {
        TextNode.__super__.constructor.call(this, text);
      } else if (text instanceof this.constructor) {
        return text;
      } else {
        console.log(text);
        throw new Error('Bad text for new TextNode(text): ' + text);
      }
    }

    return TextNode;

  })(Node);

  ParentNode = (function(_super) {
    __extends(ParentNode, _super);

    function ParentNode() {
      _ref = ParentNode.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ParentNode.prototype.append = function(node) {
      var e;
      try {
        this._impl.appendChild(node._impl);
      } catch (_error) {
        e = _error;
        console.log(e, e.stack, node);
      }
      return this;
    };

    ParentNode.prototype.children = function() {
      return [].slice.call(this._impl.childNodes).map(Node.wrap);
    };

    return ParentNode;

  })(Node);

  Element = (function(_super) {
    __extends(Element, _super);

    function Element(tag) {
      if (typeof tag === 'string') {
        this.tagName = tag;
        Element.__super__.constructor.call(this, document.createElement(tag));
      } else {
        Element.__super__.constructor.call(this, tag);
      }
    }

    return Element;

  })(ParentNode);

  DocumentFragment = (function(_super) {
    __extends(DocumentFragment, _super);

    function DocumentFragment(doc) {
      if (doc == null) {
        doc = document.createDocumentFragment();
      }
      DocumentFragment.__super__.constructor.call(this, doc);
    }

    return DocumentFragment;

  })(ParentNode);

  Document = (function(_super) {
    __extends(Document, _super);

    function Document(doc) {
      if (doc == null) {
        doc = document.implementation.createHTMLDocument();
      }
      Document.__super__.constructor.call(this, doc);
      this.body = new Element(this._impl.body);
    }

    return Document;

  })(DocumentFragment);

  main = new Document(document);

  module.exports = {
    main: main,
    Node: Node,
    TextNode: TextNode,
    ParentNode: ParentNode,
    Element: Element,
    DocumentFragment: DocumentFragment,
    Document: Document
  };

}).call(this);
