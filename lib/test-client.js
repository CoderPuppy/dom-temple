// Generated by CoffeeScript 1.6.3
(function() {
  var Parser, domready;

  domready = require('domready');

  Parser = require('./parser');

  domready(function() {
    var cur, dom, interpolate, p, root, template;
    dom = require('./dom');
    interpolate = function(val) {
      var node;
      node = dom.text(val);
      return node;
    };
    /*
    	`div= 'hmm'`
    	should compile to
    */

    template = function(__templ_impl) {
      return dom.el('div').append(__templ_impl.interpolate('hmm'));
    };
    p = new Parser;
    root = new dom.DocumentFragment;
    cur = root;
    p.on('enter', function(mode, opts) {
      return console.log("entering mode: " + mode + ", opts:", opts);
    });
    p.on('leave', function(mode, opts, data) {
      return console.log("leaving mode: " + mode + ", opts:", opts, 'data:', data);
    });
    p.on('enter:tag', function(mode, opts) {
      var el;
      console.log("entering tag: " + opts.tagName);
      el = dom.el(opts.tagName);
      cur.append(el);
      return cur = el;
    });
    p.on('leave:tag', function(mode, opts) {
      console.log("leaving tag: " + opts.tagName);
      return cur = cur.parent();
    });
    p.on('leave:code', function(mode, opts, data, oldMode, oldOpts) {
      console.log(mode, opts, oldMode, oldOpts);
      if (oldMode === 'tag' && opts.buffer === true) {
        return cur.append(interpolate(eval(data.code)));
      }
    });
    p.on('leave:text', function(mode, opts, data, oldMode, oldOpts) {
      if (oldMode === 'tag') {
        return cur.append(interpolate(data.content));
      }
    });
    p.write("div= 'hmm '\n	span test\ndiv testing");
    return p.end(function() {
      console.log(cur._impl);
      return root.children().forEach(function(el) {
        return dom.main.body.append(el);
      });
    });
  });

}).call(this);
